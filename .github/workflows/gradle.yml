name: CI/CD using github actions & docker


on:
  push:
    branches: [ "main" ] # 해당 branch에 푸쉬 발생 시 업데이트
  pull_request:
    branches: [ "main" ]

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Copy application.yml
        env:
          OCCUPY_SECRET: ${{ secrets.APPLICATION_PROD }}
          OCCUPY_SECRET_DIR: src/main/resources-prod
          OCCUPY_SECRET_TEST_DIR: src/test/resources-prod
          OCCUPY_SECRET_DIR_FILE_NAME: application.yml
        run:
          mkdir -p src/main/resources-prod
          mkdir -p src/test/resources-prod
          echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_DIR/$OCCUPY_SECRET_DIR_FILE_NAME &&
          echo $OCCUPY_SECRET | base64 --decode > $OCCUPY_SECRET_TEST_DIR/$OCCUPY_SECRET_DIR_FILE_NAME

      - name: set chmod
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean bootJar -Pprofile=prod

      - name: Docker build & push to prod
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/beep:0.0.1-SNAPSHOT .
          docker push ${{ secrets.DOCKER_USERNAME }}/beep:0.0.1-SNAPSHOT

      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }} # EC2 private key
          envs: GITHUB_SHA
          script: |
            docker stop beep
            docker rm beep
            docker rmi ${{ secrets.DOCKER_USERNAME }}/beep:0.0.1-SNAPSHOT
            docker pull ${{ secrets.DOCKER_USERNAME }}/beep:0.0.1-SNAPSHOT
            docker run -d -p 8080:8080 --name beep ${{ secrets.DOCKER_USERNAME }}/beep:0.0.1-SNAPSHOT
